@using System.ComponentModel 

@implements IDisposable

@inject IAuthenticationService Authenticator

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Karata</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (Authenticator.IsAuthenticated)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="chat">
                    <span class="oi oi-audio-spectrum" aria-hidden="true"></span> Chat
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Log Out
                </NavLink>
            </li>
        }
        else
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Log In
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    protected override void OnInitialized() => Authenticator.PropertyChanged += PropertyHasChanged;

    private void PropertyHasChanged(object sender, PropertyChangedEventArgs args) => StateHasChanged();

    public void Dispose() => Authenticator.PropertyChanged -= PropertyHasChanged;
}
