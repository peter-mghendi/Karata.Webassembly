@page "/chat"
@attribute [Authorize]

@implements IAsyncDisposable

@inject IAuthenticationService Authenticator
@inject IKarataClient Client

<h3>Chat</h3>

<div class="form-group">
    <label for="message">Message:</label>
    <textarea id="message" class="form-control w-100" @bind="messageInput" rows="4" />
    
</div>

<div class="form-group d-flex">
    <button class="btn btn-outline-primary mx-auto" disabled="@(!IsConnected)" @onclick="Send">Send</button>
</div>

<ul id="messagelist" class="list-group list-group-flush">
    @foreach (var message in messages)
    {
        <li class="list-group-item d-flex">
            @message.Content
            <small class="text-muted ml-auto">@message.DateSent.ToString()</small>
        </li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<ChatMessage> messages = new();
    private string messageInput;

    private const string Broadcast = nameof(Broadcast);
    private const string MessageReceived = nameof(MessageReceived);

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://karata-server.herokuapp.com/hubs/chat")
            .Build();

        hubConnection.On<ChatMessage>(MessageReceived, message =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        hubConnection.Closed += async _ => await hubConnection.StartAsync();

        await hubConnection.StartAsync();
    }

    private async Task Send() => await hubConnection.SendAsync(Broadcast, new ChatMessage { Content = messageInput });

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() => await hubConnection.DisposeAsync();
}
