@page "/login"

@inject IAuthenticationService Authenticator
@inject IKarataClient Client
@inject NavigationManager Navigator

<EditForm Model="@formModel" OnValidSubmit="@TryAuth" class="form-signin">
    <DataAnnotationsValidator />

    <div class="text-center mb-4">
        <img class="mb-4" src="icon-512.png" alt="" width="72" height="72">
        <h1 class="h3 mb-3 font-weight-normal">Sign In</h1>
        <p>Welcome back!</p>
    </div>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @error
            <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="@(() => error = "")">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <div class="form-group">
        <label for="email-address">Email Address</label>
        <InputText id="email-address" @bind-Value="formModel.Email" class="form-control" placeholder="Email Address" disabled=@loading />
        <ValidationMessage For=@(() => formModel.Email) />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="formModel.Password" class="form-control" placeholder="Password" disabled=@loading type="password" />
        <ValidationMessage For=@(() => formModel.Password) />
    </div>

    <button class="btn btn-outline-primary btn-block" type="submit" disabled=@loading>
        @if (loading)
        {
            <span class="spinner-grow spinner-grow-sm mr-2"></span>
        }
        @buttonText
    </button>

    <p class="mt-5 mb-3 text-muted text-center">© 2020</p>
</EditForm>

@code
{
    private bool loading = false;

    private string buttonText { get => loading ? "Loading..." : "Sign In"; }

    private string error = string.Empty;

    private LoginRequest formModel = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Authenticator.IsAuthenticated) Navigator.NavigateTo("");
    }

    private async Task TryAuth()
    {
        loading = true;

        try
        {
            var result = await Client.AuthenticateAsync(formModel);
            Authenticator.Authentication = result;
            Navigator.NavigateTo(Navigator.QueryString("returnUrl") ?? "");
        }
        catch (FlurlHttpTimeoutException)
        {
            error = "Could not connect to the server.";
        }
        catch (FlurlHttpException ex)
        {
            error = ex.Call.Response.StatusCode switch
            {
                400 => "The entered credentials are invalid.",
                404 => "The entered credentials are incorrect.",
                _ => "Something went wrong."
            };
        }

        formModel.Password = string.Empty;
        loading = false;
    }
}